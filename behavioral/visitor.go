//访问者模式
/*
参考：
1.https://www.zhihu.com/question/37236639
2.https://www.jianshu.com/p/1f1049d0a0f4
3.https://dxysun.com/2021/05/01/designPatternForVisitor/
4.https://cloud.tencent.com/developer/article/1481161
总结其中比较认同的观点
1.访问者模式的核心是，解耦数据结构与数据操作，使得对元素的操作具备优秀的扩展性。可以通过扩展不同的数据操作类型(访问者)实现对相同元素集的不同的操作。
2.软件是对现实人映射，是要解决现实问题。对世界的认知和了解决定了软件设计天花板。站在现实生活的角度看待某些技术点反而会更容易看清楚
3.设计软件需要站在不同的角度思考，思考角度不同，设计出来的效果可能相差千万里


应用场景
现实场景：
1.我们平时去食堂或者餐厅吃饭，餐厅的菜单和就餐方式是相对稳定的，但是去餐厅就餐的人员是每天都在发生变化的，因此就餐人员就是访问者。
（菜单：数据，是相对固定的，人员选择菜单的方式是变化的）
2.中方专机什么时间在哪个机场降落，美方派谁在机场迎接，然后就是欢迎仪式和欢迎晚宴，接着就是会见哪些人，开哪些会议，签署哪些文件，参观哪些地方等等，最后就是结束访问启程回国。
（流程：流程可以抽象出流程类，也是相对固定的，不同国家的访问待遇是不同的、变化的）
3.无论是国内游还是出境游，先报好旅行社，在指定的时间乘坐交通工具到达目的地后，会有一辆大巴车拉着我们，按照行程开始去景点，去吃饭，去酒店等等。
我们什么都不用操心，跟着走就行了，因为旅行社和导游都安排好了。再说了，即我们使有意见，导游也不会听我们的。
颇令人讨厌的可能就是逛购物店了，但是没办法，因为协议已经签了。我们有义务进购物店，听相关人员讲解，想买的就买，不想买的随便看看，但是不能提前出去。
其实还有更坑的，那就是导游在大巴车上强行收费，说些很难听的话，甚至骂人/威胁。尤其是在境外，他们觉得此生很难再见面，有时话说的特别难听。
所以整个行程下来，既有高兴的时候，也有心烦的时候。导游给我们讲解当地历史的时候，觉得他是“好人”，领我们进购物店时，又觉得他是“坏人”。
（同2，流程是固定的，不同的人对购物袋选择是不一样的、变化的）
抽象场景：
当系统中存在类型数目稳定(固定)的一类数据结构时，可以通过访问者模式方便地实现对该类型所有数据结构的不同操作，而又不会数据产生任何副作用(脏数据)。简而言之，就是对集合中的不同类型数据(类型数量稳定)进行多种操作，则使用访问者模式。
下面总结一下访问者模式的适用场景
1.数据结构稳定，作用于数据结构的操作经常变化的场景
2.需要数据结构与数据操作分离的场景
3.需要对不同数据类型(元素)进行操作，而不使用分支判断具体类型的场景、

缺点：
当被访问者的数据结构发生变化时，需要所有的访问者增加对应的访问方法




*/
